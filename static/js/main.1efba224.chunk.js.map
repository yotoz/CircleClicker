{"version":3,"sources":["components/HpBar/index.js","components/HitDamage/index.js","components/GameScreen/index.js","lib/calc.js","App.js","serviceWorker.js","index.js"],"names":["HpBar","width","hp","maxHp","hpPer","toFixed","className","style","HitDamage","damage","left","top","hitDamageRef","useRef","useEffect","current","animate","fontSize","duration","ref","initialBossState","bossStateReducer","state","action","type","GameScreen","useReducer","bossState","bossStateDispatch","useState","setMaxHp","hitDamage","setHitDamage","hitDamagePos","setHitDamagePos","bossRef","keyupHandler","e","keyCode","newHitDamage","Math","floor","random","window","addEventListener","removeEventListener","newBossSize","getBoundingClientRect","x","y","height","p1X","p1Y","p2X","p2Y","temp","mX","mY","roundX","pow","roundY","genRandPos","bossStyle","borderRadius","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1efba224.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nconst HpBar = ({ width, hp, maxHp }) => {\r\n  const hpPer = `${((hp / maxHp) * 100).toFixed(2)}%`;\r\n\r\n  return (\r\n    <div className=\"hp-bar\" style={{ width }}>\r\n      <div className=\"current-hp\" style={{ width: hpPer }}></div>\r\n      <div className=\"hp-text\">\r\n        {hp} / {maxHp}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HpBar;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nconst HitDamage = ({ damage, left, top }) => {\r\n  const hitDamageRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!hitDamageRef.current) return;\r\n\r\n    hitDamageRef.current.animate(\r\n      [\r\n        {\r\n          fontSize: \"28px\",\r\n        },\r\n        {\r\n          fontSize: \"100px\",\r\n        },\r\n        {\r\n          fontSize: \"28px\",\r\n        },\r\n      ],\r\n      {\r\n        duration: 250,\r\n      }\r\n    );\r\n  }, [damage, left, top]);\r\n\r\n  return (\r\n    <div className=\"hit-damage\" style={{ left, top }} ref={hitDamageRef}>\r\n      {damage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HitDamage;\r\n","import React, { useState, useEffect, useRef, useReducer } from \"react\";\r\nimport \"./styles.scss\";\r\nimport HpBar from \"../HpBar\";\r\nimport HitDamage from \"../HitDamage\";\r\nimport { genRandPos } from \"../../lib/calc\";\r\n\r\n//32 13\r\nconst KEY_SPACE = 32;\r\nconst KEY_ENTER = 13;\r\n\r\nconst INIT_HP = 500;\r\n\r\nconst initialBossState = {\r\n  hp: INIT_HP,\r\n};\r\nconst bossStateReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"SET\":\r\n      return {\r\n        hp: action.hp,\r\n      };\r\n    case \"ATTACK\":\r\n      return {\r\n        hp: state.hp - action.damage,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst GameScreen = () => {\r\n  const [bossState, bossStateDispatch] = useReducer(\r\n    bossStateReducer,\r\n    initialBossState\r\n  );\r\n  const [maxHp, setMaxHp] = useState(INIT_HP);\r\n  const [hitDamage, setHitDamage] = useState(0);\r\n  const [hitDamagePos, setHitDamagePos] = useState({ left: 0, top: 0 });\r\n\r\n  const bossRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const keyupHandler = (e) => {\r\n      switch (e.keyCode) {\r\n        case KEY_SPACE:\r\n        case KEY_ENTER:\r\n          let newHitDamage = Math.floor(Math.random() * 5) + 1;\r\n\r\n          if (Math.random() < 0.5) {\r\n            newHitDamage *= 5;\r\n          }\r\n\r\n          setHitDamage(newHitDamage);\r\n\r\n          bossStateDispatch({\r\n            type: \"ATTACK\",\r\n            damage: newHitDamage,\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keyup\", keyupHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keyup\", keyupHandler);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (bossState.hp < 0) {\r\n      const newBossSize = Math.floor(Math.random() * 600 + 100);\r\n      bossStateDispatch({\r\n        type: \"SET\",\r\n        hp: newBossSize,\r\n      });\r\n      setMaxHp(newBossSize);\r\n    }\r\n  }, [bossState]);\r\n\r\n  useEffect(() => {\r\n    if (!bossRef.current) {\r\n      return;\r\n    }\r\n\r\n    const { x, y, width, height } = bossRef.current.getBoundingClientRect();\r\n\r\n    setHitDamagePos(genRandPos(x, y, x + width, y + height));\r\n  }, [bossState.hp]);\r\n\r\n  const bossStyle = {\r\n    width: bossState.hp,\r\n    height: bossState.hp,\r\n    borderRadius: bossState.hp / 2,\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-screen\">\r\n      <div className=\"game-monitor\">\r\n        {hitDamage > 0 && (\r\n          <HitDamage\r\n            damage={hitDamage}\r\n            left={hitDamagePos.left}\r\n            top={hitDamagePos.top}\r\n          />\r\n        )}\r\n        <div className=\"boss\" style={bossStyle} ref={bossRef} />\r\n      </div>\r\n      <div className=\"guideLine\">\r\n        <HpBar width={300} hp={bossState.hp} maxHp={maxHp} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameScreen;\r\n","export const genRandPos = (p1X, p1Y, p2X, p2Y) => {\r\n  if (p2X > p1X) {\r\n    const temp = p1X;\r\n    p1X = p2X;\r\n    p2X = temp;\r\n  }\r\n\r\n  if (p2Y > p1Y) {\r\n    const temp = p1Y;\r\n    p1Y = p2Y;\r\n    p2Y = temp;\r\n  }\r\n\r\n  const mX = Math.floor((p1X + p2X) / 10);\r\n  const mY = Math.floor((p1Y + p2Y) / 10);\r\n\r\n  const roundX = Math.pow(10, mX);\r\n  const roundY = Math.pow(10, mY);\r\n\r\n  const pX = Math.floor(Math.random() * roundX) % (p1X - p2X);\r\n  const pY = Math.floor(Math.random() * roundY) % (p1Y - p2Y);\r\n\r\n  return {\r\n    left: p2X + pX,\r\n    top: p2Y + pY,\r\n  };\r\n};\r\n","import React from \"react\";\nimport GameScreen from \"./components/GameScreen\";\n\nfunction App() {\n  return <GameScreen />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}